[
    {
        "label": "modeles",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "modeles",
        "description": "modeles",
        "detail": "modeles",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "validators",
        "description": "validators",
        "isExtraImport": true,
        "detail": "validators",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "validators",
        "description": "validators",
        "isExtraImport": true,
        "detail": "validators",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "TableClasse",
        "importPath": "modeles.table_classe",
        "description": "modeles.table_classe",
        "isExtraImport": true,
        "detail": "modeles.table_classe",
        "documentation": {}
    },
    {
        "label": "TableClasse",
        "importPath": "modeles.table_classe",
        "description": "modeles.table_classe",
        "isExtraImport": true,
        "detail": "modeles.table_classe",
        "documentation": {}
    },
    {
        "label": "TableClasse",
        "importPath": "modeles.table_classe",
        "description": "modeles.table_classe",
        "isExtraImport": true,
        "detail": "modeles.table_classe",
        "documentation": {}
    },
    {
        "label": "TableClasse",
        "importPath": "modeles.table_classe",
        "description": "modeles.table_classe",
        "isExtraImport": true,
        "detail": "modeles.table_classe",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "controller",
        "description": "controller",
        "isExtraImport": true,
        "detail": "controller",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "controller",
        "description": "controller",
        "isExtraImport": true,
        "detail": "controller",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "controller",
        "description": "controller",
        "isExtraImport": true,
        "detail": "controller",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "controller",
        "description": "controller",
        "isExtraImport": true,
        "detail": "controller",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "controller",
        "description": "controller",
        "isExtraImport": true,
        "detail": "controller",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "controller",
        "description": "controller",
        "isExtraImport": true,
        "detail": "controller",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "TableEleve",
        "importPath": "modeles.table_eleve",
        "description": "modeles.table_eleve",
        "isExtraImport": true,
        "detail": "modeles.table_eleve",
        "documentation": {}
    },
    {
        "label": "TableTuteur",
        "importPath": "modeles.table_tuteur",
        "description": "modeles.table_tuteur",
        "isExtraImport": true,
        "detail": "modeles.table_tuteur",
        "documentation": {}
    },
    {
        "label": "TableTuteur",
        "importPath": "modeles.table_tuteur",
        "description": "modeles.table_tuteur",
        "isExtraImport": true,
        "detail": "modeles.table_tuteur",
        "documentation": {}
    },
    {
        "label": "TableEnseignant",
        "importPath": "modeles.table_enseignant",
        "description": "modeles.table_enseignant",
        "isExtraImport": true,
        "detail": "modeles.table_enseignant",
        "documentation": {}
    },
    {
        "label": "TableEnseignant",
        "importPath": "modeles.table_enseignant",
        "description": "modeles.table_enseignant",
        "isExtraImport": true,
        "detail": "modeles.table_enseignant",
        "documentation": {}
    },
    {
        "label": "TableMatiere",
        "importPath": "modeles.table_matiere",
        "description": "modeles.table_matiere",
        "isExtraImport": true,
        "detail": "modeles.table_matiere",
        "documentation": {}
    },
    {
        "label": "TableMatiere",
        "importPath": "modeles.table_matiere",
        "description": "modeles.table_matiere",
        "isExtraImport": true,
        "detail": "modeles.table_matiere",
        "documentation": {}
    },
    {
        "label": "TableProgramme",
        "importPath": "modeles.table_programme",
        "description": "modeles.table_programme",
        "isExtraImport": true,
        "detail": "modeles.table_programme",
        "documentation": {}
    },
    {
        "label": "ajouter",
        "kind": 2,
        "importPath": ".c.classe_controller copy",
        "description": ".c.classe_controller copy",
        "peekOfCode": "def ajouter():\n    nom = input(\"Choisir : \")\n    while not validate_text(nom):\n        nom = input(\"Nom de l'élève : \")\n    effectif = input(\"Prénom de l'élève : \")\n    while not validate_number(effectif):\n        effectif = input(\"Prénom de l'élève : \")\n    eleve = {\"nom\": nom, \"prénom\": prenom}\n    eleves.append(eleve)\n    print(f\"Élève {prenom} {nom} ajouté avec succès.\")",
        "detail": ".c.classe_controller copy",
        "documentation": {}
    },
    {
        "label": "printer",
        "kind": 2,
        "importPath": ".c.classe_controller copy",
        "description": ".c.classe_controller copy",
        "peekOfCode": "def printer():\n    print(f\"1. 2nde A4\")\n    print(f\"2. Znde D\")\n    print(f\"3. 2nde C4\")\n    print(f\"4. 1ere A4\")\n    print(f\"5. 1ere D\")\n    print(f\"6. 1ere C4\")\n    print(f\"7. Tle A4\")\n    print(f\"8. Tle D\")\n    print(f\"9. Tle C4\")",
        "detail": ".c.classe_controller copy",
        "documentation": {}
    },
    {
        "label": "ajouter",
        "kind": 2,
        "importPath": ".c.classe_controller copy",
        "description": ".c.classe_controller copy",
        "peekOfCode": "def ajouter():\n    printer()    \n    choix = input(\"Choisissez une option (1-9) : pour le nom de la classe\")\n    while True:\n        if choix == \"1\":\n            nom = \"2nde A4\"\n            break\n        elif choix == \"2\":\n            nom = \"2nde D\"\n            break",
        "detail": ".c.classe_controller copy",
        "documentation": {}
    },
    {
        "label": "supprimer_eleve",
        "kind": 2,
        "importPath": ".c.classe_controller copy",
        "description": ".c.classe_controller copy",
        "peekOfCode": "def supprimer_eleve():\n    if len(eleves) == 0:\n        print(\"Aucun élève à supprimer.\")\n        return\n    print(\"Liste des élèves :\")\n    for i, eleve in enumerate(eleves):\n        print(f\"{i+1}. {eleve['prénom']} {eleve['nom']}\")\n    choix = int(input(\"Choisissez le numéro de l'élève à supprimer : \"))\n    if choix < 1 or choix > len(eleves):\n        print(\"Choix invalide.\")",
        "detail": ".c.classe_controller copy",
        "documentation": {}
    },
    {
        "label": "editer_eleve",
        "kind": 2,
        "importPath": ".c.classe_controller copy",
        "description": ".c.classe_controller copy",
        "peekOfCode": "def editer_eleve():\n    if len(eleves) == 0:\n        print(\"Aucun élève à éditer.\")\n        return\n    print(\"Liste des élèves :\")\n    for i, eleve in enumerate(eleves):\n        print(f\"{i+1}. {eleve['prénom']} {eleve['nom']}\")\n    choix = int(input(\"Choisissez le numéro de l'élève à éditer : \"))\n    if choix < 1 or choix > len(eleves):\n        print(\"Choix invalide.\")",
        "detail": ".c.classe_controller copy",
        "documentation": {}
    },
    {
        "label": "afficher_eleves",
        "kind": 2,
        "importPath": ".c.classe_controller copy",
        "description": ".c.classe_controller copy",
        "peekOfCode": "def afficher_eleves():\n    if not eleves:\n        print(\"Aucun élève enregistré.\")\n        return\n    print(\"===================================\")\n    print(\"           Liste des élèves         \")\n    print(\"===================================\")\n    print(\"{:<10} {:<10} {:<15} {:<20} {:<10}\".format(\n        \"Prénom\", \"Nom\", \"Contact\", \"Adresse\", \"Genre\"))\n    print(\"-----------------------------------\")",
        "detail": ".c.classe_controller copy",
        "documentation": {}
    },
    {
        "label": "ajouter_eleve",
        "kind": 2,
        "importPath": ".c.classe_controller copy",
        "description": ".c.classe_controller copy",
        "peekOfCode": "def ajouter_eleve():\n    nom = input(\"Nom de l'élève : \")\n    prenom = input(\"Prénom de l'élève : \")\n    contact = input(\"Contact de l'élève : \")\n    adresse = input(\"Adresse de l'élève : \")\n    genre = input(\"Genre de l'élève : \")\n    eleve = (prenom, nom, contact, adresse, genre)\n    eleves.append(eleve)\n    print(f\"Élève {prenom} {nom} ajouté avec succès.\")\n# Autres fonctions pour supprimer, éditer les élèves...",
        "detail": ".c.classe_controller copy",
        "documentation": {}
    },
    {
        "label": "eleves",
        "kind": 5,
        "importPath": ".c.classe_controller copy",
        "description": ".c.classe_controller copy",
        "peekOfCode": "eleves = []\ndef afficher_eleves():\n    if not eleves:\n        print(\"Aucun élève enregistré.\")\n        return\n    print(\"===================================\")\n    print(\"           Liste des élèves         \")\n    print(\"===================================\")\n    print(\"{:<10} {:<10} {:<15} {:<20} {:<10}\".format(\n        \"Prénom\", \"Nom\", \"Contact\", \"Adresse\", \"Genre\"))",
        "detail": ".c.classe_controller copy",
        "documentation": {}
    },
    {
        "label": "ajouter_eleve",
        "kind": 2,
        "importPath": ".c.eleve_controller",
        "description": ".c.eleve_controller",
        "peekOfCode": "def ajouter_eleve():\n    nom = input(\"Nom de l'élève : \")\n    prenom = input(\"Prénom de l'élève : \")\n    eleve = {\"nom\": nom, \"prénom\": prenom}\n    eleves.append(eleve)\n    print(f\"Élève {prenom} {nom} ajouté avec succès.\")\ndef supprimer_eleve():\n    if len(eleves) == 0:\n        print(\"Aucun élève à supprimer.\")\n        return",
        "detail": ".c.eleve_controller",
        "documentation": {}
    },
    {
        "label": "supprimer_eleve",
        "kind": 2,
        "importPath": ".c.eleve_controller",
        "description": ".c.eleve_controller",
        "peekOfCode": "def supprimer_eleve():\n    if len(eleves) == 0:\n        print(\"Aucun élève à supprimer.\")\n        return\n    print(\"Liste des élèves :\")\n    for i, eleve in enumerate(eleves):\n        print(f\"{i+1}. {eleve['prénom']} {eleve['nom']}\")\n    choix = int(input(\"Choisissez le numéro de l'élève à supprimer : \"))\n    if choix < 1 or choix > len(eleves):\n        print(\"Choix invalide.\")",
        "detail": ".c.eleve_controller",
        "documentation": {}
    },
    {
        "label": "editer_eleve",
        "kind": 2,
        "importPath": ".c.eleve_controller",
        "description": ".c.eleve_controller",
        "peekOfCode": "def editer_eleve():\n    if len(eleves) == 0:\n        print(\"Aucun élève à éditer.\")\n        return\n    print(\"Liste des élèves :\")\n    for i, eleve in enumerate(eleves):\n        print(f\"{i+1}. {eleve['prénom']} {eleve['nom']}\")\n    choix = int(input(\"Choisissez le numéro de l'élève à éditer : \"))\n    if choix < 1 or choix > len(eleves):\n        print(\"Choix invalide.\")",
        "detail": ".c.eleve_controller",
        "documentation": {}
    },
    {
        "label": "afficher_eleves",
        "kind": 2,
        "importPath": ".c.eleve_controller",
        "description": ".c.eleve_controller",
        "peekOfCode": "def afficher_eleves():\n    if not eleves:\n        print(\"Aucun élève enregistré.\")\n        return\n    print(\"===================================\")\n    print(\"           Liste des élèves         \")\n    print(\"===================================\")\n    print(\"{:<10} {:<10} {:<15} {:<20} {:<10}\".format(\"Prénom\", \"Nom\", \"Contact\", \"Adresse\", \"Genre\"))\n    print(\"-----------------------------------\")\n    for eleve in eleves:",
        "detail": ".c.eleve_controller",
        "documentation": {}
    },
    {
        "label": "ajouter_eleve",
        "kind": 2,
        "importPath": ".c.eleve_controller",
        "description": ".c.eleve_controller",
        "peekOfCode": "def ajouter_eleve():\n    nom = input(\"Nom de l'élève : \")\n    prenom = input(\"Prénom de l'élève : \")\n    contact = input(\"Contact de l'élève : \")\n    adresse = input(\"Adresse de l'élève : \")\n    genre = input(\"Genre de l'élève : \")\n    eleve = (prenom, nom, contact, adresse, genre)\n    eleves.append(eleve)\n    print(f\"Élève {prenom} {nom} ajouté avec succès.\")\n# Autres fonctions pour supprimer, éditer les élèves...",
        "detail": ".c.eleve_controller",
        "documentation": {}
    },
    {
        "label": "eleves",
        "kind": 5,
        "importPath": ".c.eleve_controller",
        "description": ".c.eleve_controller",
        "peekOfCode": "eleves = []\ndef afficher_eleves():\n    if not eleves:\n        print(\"Aucun élève enregistré.\")\n        return\n    print(\"===================================\")\n    print(\"           Liste des élèves         \")\n    print(\"===================================\")\n    print(\"{:<10} {:<10} {:<15} {:<20} {:<10}\".format(\"Prénom\", \"Nom\", \"Contact\", \"Adresse\", \"Genre\"))\n    print(\"-----------------------------------\")",
        "detail": ".c.eleve_controller",
        "documentation": {}
    },
    {
        "label": "tables",
        "kind": 5,
        "importPath": "routes.controllers.modeles.database",
        "description": "routes.controllers.modeles.database",
        "peekOfCode": "tables = {\n    TableClasse.relation: TableClasse.schema,\n    TableTuteur.relation: TableTuteur.schema,\n    TableEleve.relation: TableEleve.schema,\n    TableEnseignant.relation: TableEnseignant.schema,\n    TableMatiere.relation: TableMatiere.schema,\n    TableProgramme.relation: TableProgramme.schema\n}\n# print(Glob.base)",
        "detail": "routes.controllers.modeles.database",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "routes.controllers.modeles.env",
        "description": "routes.controllers.modeles.env",
        "peekOfCode": "database = \"gnote\"\nusername = \"audrey\"\npasswd = \"1234\"\nhost = \"127.0.0.1\"\nport = 5432",
        "detail": "routes.controllers.modeles.env",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "routes.controllers.modeles.env",
        "description": "routes.controllers.modeles.env",
        "peekOfCode": "username = \"audrey\"\npasswd = \"1234\"\nhost = \"127.0.0.1\"\nport = 5432",
        "detail": "routes.controllers.modeles.env",
        "documentation": {}
    },
    {
        "label": "passwd",
        "kind": 5,
        "importPath": "routes.controllers.modeles.env",
        "description": "routes.controllers.modeles.env",
        "peekOfCode": "passwd = \"1234\"\nhost = \"127.0.0.1\"\nport = 5432",
        "detail": "routes.controllers.modeles.env",
        "documentation": {}
    },
    {
        "label": "host",
        "kind": 5,
        "importPath": "routes.controllers.modeles.env",
        "description": "routes.controllers.modeles.env",
        "peekOfCode": "host = \"127.0.0.1\"\nport = 5432",
        "detail": "routes.controllers.modeles.env",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "routes.controllers.modeles.env",
        "description": "routes.controllers.modeles.env",
        "peekOfCode": "port = 5432",
        "detail": "routes.controllers.modeles.env",
        "documentation": {}
    },
    {
        "label": "Linker",
        "kind": 6,
        "importPath": "routes.controllers.modeles.linker",
        "description": "routes.controllers.modeles.linker",
        "peekOfCode": "class Linker(object):\n    \"\"\"Linker permet de faire un lien entre python et une SGBDR notamment PostgreSQL\"\"\"\n    def __init__(self):\n        try:\n            self.conn = psycopg2.connect(\n                dbname=env.database,\n                user=env.username,\n                password=env.passwd,\n                port=env.port,\n                host=env.host,",
        "detail": "routes.controllers.modeles.linker",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "routes.controllers.modeles.linker",
        "description": "routes.controllers.modeles.linker",
        "peekOfCode": "def main():\n    f = Linker()\n    f.createTables(Database.tables)\n    # f.createTables({TableTuteur.table:TableTuteur.schema})\nif __name__ == \"__main__\":\n    # main()\n    pass",
        "detail": "routes.controllers.modeles.linker",
        "documentation": {}
    },
    {
        "label": "create_tables",
        "kind": 2,
        "importPath": "routes.controllers.modeles.migration",
        "description": "routes.controllers.modeles.migration",
        "peekOfCode": "def create_tables(relation, schema):\n    req = \"\"\n    primary_key_def = \"\"\n    foreign = \"\"\n    count = 1\n    req = f\"CREATE TABLE {relation} (\"\n    for col in schema:\n        req = (\n            req\n            + col[\"column_name\"]",
        "detail": "routes.controllers.modeles.migration",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "routes.controllers.modeles.migration",
        "description": "routes.controllers.modeles.migration",
        "peekOfCode": "def main():\n    for relation in tables:\n        create_tables(relation, tables[relation])\n        # print(relation)\n        # print(tables[relation])   ûîðæþç789~~~###ðæ±þß\nif __name__ == \"__main__\":\n    main()\n    pass",
        "detail": "routes.controllers.modeles.migration",
        "documentation": {}
    },
    {
        "label": "SchemaBuilder",
        "kind": 6,
        "importPath": "routes.controllers.modeles.schema_builder",
        "description": "routes.controllers.modeles.schema_builder",
        "peekOfCode": "class SchemaBuilder:\n    def unique(self):\n        self.col[\"unique\"] = 1\n        return self\n    def not_null(self):\n        self.col[\"null\"] = 0\n        return self\n    def foreign_key(self):\n        self.col[\"constraint\"] = \"rk\"\n        return self",
        "detail": "routes.controllers.modeles.schema_builder",
        "documentation": {}
    },
    {
        "label": "String",
        "kind": 6,
        "importPath": "routes.controllers.modeles.schema_builder",
        "description": "routes.controllers.modeles.schema_builder",
        "peekOfCode": "class String(SchemaBuilder):\n    def __init__(self, name):\n        self.col = {\n            \"column_name\": name,\n            \"constraint\": \"\",\n            \"type\": \"varchar\",\n            \"reference_col\": \"\",\n            \"reference_table\": \"\",\n            \"null\": 1,\n            \"unique\": 0,",
        "detail": "routes.controllers.modeles.schema_builder",
        "documentation": {}
    },
    {
        "label": "PrimaryKey",
        "kind": 6,
        "importPath": "routes.controllers.modeles.schema_builder",
        "description": "routes.controllers.modeles.schema_builder",
        "peekOfCode": "class PrimaryKey(SchemaBuilder):\n    def __init__(self, name):\n        self.col = {\n            \"column_name\": name,\n            \"constraint\": \"pk\",\n            \"type\": \"serial\",\n            \"reference_col\": \"\",\n            \"reference_table\": \"\",\n            \"null\": 0,\n            \"unique\": 1,",
        "detail": "routes.controllers.modeles.schema_builder",
        "documentation": {}
    },
    {
        "label": "Integer",
        "kind": 6,
        "importPath": "routes.controllers.modeles.schema_builder",
        "description": "routes.controllers.modeles.schema_builder",
        "peekOfCode": "class Integer(SchemaBuilder):\n    def __init__(self, name):\n        self.col = {\n            \"column_name\": name,\n            \"constraint\": \"\",\n            \"type\": \"integer\",\n            \"reference_col\": \"\",\n            \"reference_table\": \"\",\n            \"null\": 1,\n            \"unique\": 0,",
        "detail": "routes.controllers.modeles.schema_builder",
        "documentation": {}
    },
    {
        "label": "Date",
        "kind": 6,
        "importPath": "routes.controllers.modeles.schema_builder",
        "description": "routes.controllers.modeles.schema_builder",
        "peekOfCode": "class Date(SchemaBuilder):\n    def __init__(self, name):\n        self.col = {\n            \"column_name\": name,\n            \"constraint\": \"\",\n            \"type\": \"date\",\n            \"reference_col\": \"\",\n            \"reference_table\": \"\",\n            \"null\": 1,\n            \"unique\": 0,",
        "detail": "routes.controllers.modeles.schema_builder",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "routes.controllers.modeles.schema_builder",
        "description": "routes.controllers.modeles.schema_builder",
        "peekOfCode": "__all__ = [\"PrimaryKey\", \"String\", \"Integer\", \"Date\"]\nclass SchemaBuilder:\n    def unique(self):\n        self.col[\"unique\"] = 1\n        return self\n    def not_null(self):\n        self.col[\"null\"] = 0\n        return self\n    def foreign_key(self):\n        self.col[\"constraint\"] = \"rk\"",
        "detail": "routes.controllers.modeles.schema_builder",
        "documentation": {}
    },
    {
        "label": "Table",
        "kind": 6,
        "importPath": "routes.controllers.modeles.table",
        "description": "routes.controllers.modeles.table",
        "peekOfCode": "class Table(object):\n    relation = \"\"\n    schema = []\n    primary_key = \"\"\n    lk = Linker()\n    @classmethod\n    def get_columns(cls):\n        return [t[\"column_name\"] for t in cls.schema]\n    @classmethod\n    def get_colunm_type(cls, column):",
        "detail": "routes.controllers.modeles.table",
        "documentation": {}
    },
    {
        "label": "TableClasse",
        "kind": 6,
        "importPath": "routes.controllers.modeles.table_classe",
        "description": "routes.controllers.modeles.table_classe",
        "peekOfCode": "class TableClasse(Table):\n    relation = \"classe\"\n    schema = [\n        PrimaryKey(\"id_classe\").build(),\n        String(\"nom\").not_null().build(),\n        Integer(\"effectif\").build(),\n    ]\n    primary_key = \"id_classe\"\n    def __init__(self, nom=None, effectif=0):\n        self.id_classe = 0",
        "detail": "routes.controllers.modeles.table_classe",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "routes.controllers.modeles.table_classe",
        "description": "routes.controllers.modeles.table_classe",
        "peekOfCode": "def main():\n    print(TableClasse.schema)\nif __name__ == \"__main__\":\n    main()\n    print(dir())\n    pass",
        "detail": "routes.controllers.modeles.table_classe",
        "documentation": {}
    },
    {
        "label": "TableEleve",
        "kind": 6,
        "importPath": "routes.controllers.modeles.table_eleve",
        "description": "routes.controllers.modeles.table_eleve",
        "peekOfCode": "class TableEleve(TablePersonne):\n    relation = \"eleve\"\n    schema = [\n        PrimaryKey(\"matricule\").build(),\n        String(\"nom\").not_null().build(),\n        String(\"prenoms\").not_null().build(),\n        Date(\"date_naissance\").not_null().build(),\n        String(\"contact\").not_null().build(),\n        String(\"genre\").not_null().build(),\n        String(\"adresse\").not_null().build(),",
        "detail": "routes.controllers.modeles.table_eleve",
        "documentation": {}
    },
    {
        "label": "TableEnseignant",
        "kind": 6,
        "importPath": "routes.controllers.modeles.table_enseignant",
        "description": "routes.controllers.modeles.table_enseignant",
        "peekOfCode": "class TableEnseignant(TablePersonne):\n    relation = \"enseignant\"\n    schema = [\n        PrimaryKey('matricule').build(),\n        String('nom').not_null().build(),\n        String('prenoms').not_null().build(),\n        Date('date_naissance').not_null().build(),\n        String('contact').not_null().build(),\n        String('genre').not_null().build(),\n        String('adresse').not_null().build(),",
        "detail": "routes.controllers.modeles.table_enseignant",
        "documentation": {}
    },
    {
        "label": "TableMatiere",
        "kind": 6,
        "importPath": "routes.controllers.modeles.table_matiere",
        "description": "routes.controllers.modeles.table_matiere",
        "peekOfCode": "class TableMatiere(Table):\n    relation = \"matiere\"\n    schema = [\n        PrimaryKey('id_matiere').build(),\n        String('libelle').not_null().unique().build()\n    ]\n    primary_key = \"id_matiere\"\n    def __init__(\n        self,\n        libelle=None,",
        "detail": "routes.controllers.modeles.table_matiere",
        "documentation": {}
    },
    {
        "label": "TablePersonne",
        "kind": 6,
        "importPath": "routes.controllers.modeles.table_personne",
        "description": "routes.controllers.modeles.table_personne",
        "peekOfCode": "class TablePersonne(Table):\n    primary_key = \"matricule\"\n    def __init__(\n        self,\n        nom=None,\n        prenom=None,\n        date_naissance=None,\n        contact=None,\n        genre=None,\n        adresse=None,",
        "detail": "routes.controllers.modeles.table_personne",
        "documentation": {}
    },
    {
        "label": "TableProgramme",
        "kind": 6,
        "importPath": "routes.controllers.modeles.table_programme",
        "description": "routes.controllers.modeles.table_programme",
        "peekOfCode": "class TableProgramme(Table):\n    relation = \"programme\"\n    schema = [\n        PrimaryKey(\"id_programme\").build(),\n        Integer(\"coeficient\").not_null().build(),\n        Integer(\"matiere\").foreign_key().references(\"matiere\", \"id_matiere\").build(),\n        Integer(\"prof\").foreign_key().references(\"enseignant\", \"matricule\").build(),\n        Integer(\"classe\").foreign_key().references(\"classe\", \"id_classe\").build(),\n    ]\n    primary_key = \"id_programme\"",
        "detail": "routes.controllers.modeles.table_programme",
        "documentation": {}
    },
    {
        "label": "TableTuteur",
        "kind": 6,
        "importPath": "routes.controllers.modeles.table_tuteur",
        "description": "routes.controllers.modeles.table_tuteur",
        "peekOfCode": "class TableTuteur(TablePersonne):\n    relation = \"tuteur\"\n    schema = [\n        PrimaryKey(\"matricule\").build(),\n        String(\"nom\").not_null().build(),\n        String(\"prenoms\").not_null().build(),\n        Date(\"date_naissance\").not_null().build(),\n        String(\"contact\").not_null().build(),\n        String(\"genre\").not_null().build(),\n        String(\"adresse\").not_null().build(),",
        "detail": "routes.controllers.modeles.table_tuteur",
        "documentation": {}
    },
    {
        "label": "ClasseController",
        "kind": 6,
        "importPath": "routes.controllers.classe_controller",
        "description": "routes.controllers.classe_controller",
        "peekOfCode": "class ClasseController(Controller):\n    model = Classe\n    def __init__(self):\n        self.avalible_names = [\n            \"2nde A4\",\n            \"2nde D\",\n            \"2nde C4\",\n            \"1ere A4\",\n            \"1ere D\",\n            \"1ere C4\",",
        "detail": "routes.controllers.classe_controller",
        "documentation": {}
    },
    {
        "label": "Controller",
        "kind": 6,
        "importPath": "routes.controllers.controller",
        "description": "routes.controllers.controller",
        "peekOfCode": "class Controller:\n    model = object()\n    MSG_INVALID_TEXT = \"Saisie invalide. Veuillez saisir un text valide.\"\n    MSG_INVALID_NUMBER = \"Saisie invalide. Veuillez saisir un number valide.\"\n    MSG_INVALID_DATE = \"Saisie invalide. Veuillez saisir une date valide.\"\n    MSG_INVALID_OPTION = \"Choix invalide. Veuillez sélectionner une option valide.\"\n    def create(self):\n        raise NotImplementedError(\"Le controlleur doit implémenter la méthode\")\n    @classmethod\n    def destroy(cls):",
        "detail": "routes.controllers.controller",
        "documentation": {}
    },
    {
        "label": "EleveController",
        "kind": 6,
        "importPath": "routes.controllers.eleve_controller",
        "description": "routes.controllers.eleve_controller",
        "peekOfCode": "class EleveController(Controller):\n    model = Eleve\n    def __init__(\n        self,\n    ):\n        self.create()\n    @classmethod\n    def create(cls):\n        nom = cls.read(\"nom\")\n        prenoms = cls.read(\"prenoms\")",
        "detail": "routes.controllers.eleve_controller",
        "documentation": {}
    },
    {
        "label": "EnseignantController",
        "kind": 6,
        "importPath": "routes.controllers.enseignant_controller",
        "description": "routes.controllers.enseignant_controller",
        "peekOfCode": "class EnseignantController(Controller):\n    model = Enseignant\n    def __init__(\n        self,\n    ):\n        self.afficher()\n        pass\n    @classmethod\n    def create(cls):\n        nom = cls.read(\"nom\")",
        "detail": "routes.controllers.enseignant_controller",
        "documentation": {}
    },
    {
        "label": "MatiereController",
        "kind": 6,
        "importPath": "routes.controllers.matiere_controller",
        "description": "routes.controllers.matiere_controller",
        "peekOfCode": "class MatiereController(Controller):\n    model = Matiere\n    def __init__(\n        self,\n    ):\n        self.create()\n        pass\n    @classmethod\n    def create(cls):\n        libelle = cls.read(\"libelle\")",
        "detail": "routes.controllers.matiere_controller",
        "documentation": {}
    },
    {
        "label": "ProgrammeController",
        "kind": 6,
        "importPath": "routes.controllers.programme_controller",
        "description": "routes.controllers.programme_controller",
        "peekOfCode": "class ProgrammeController(Controller):\n    model = Programme\n    def __init__(\n        self,\n    ):\n        self.create()\n    @classmethod\n    def create(cls):\n        coef = cls.read(\"coeficient\", False, [\"1\", \"2\", \"3\", \"4\", \"5\"])\n        matiere = cls.assign(Matiere)",
        "detail": "routes.controllers.programme_controller",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "routes.controllers.programme_controller",
        "description": "routes.controllers.programme_controller",
        "peekOfCode": "t = EleveController()",
        "detail": "routes.controllers.programme_controller",
        "documentation": {}
    },
    {
        "label": "TuteurController",
        "kind": 6,
        "importPath": "routes.controllers.tuteur_controller",
        "description": "routes.controllers.tuteur_controller",
        "peekOfCode": "class TuteurController(Controller):\n    model = Tuteur\n    def __init__(\n        self,\n    ):\n        self.update()\n    @classmethod\n    def create(cls):\n        nom = cls.read(\"nom\")\n        prenoms = cls.read(\"prenoms\")",
        "detail": "routes.controllers.tuteur_controller",
        "documentation": {}
    },
    {
        "label": "validate_text",
        "kind": 2,
        "importPath": "routes.controllers.validators",
        "description": "routes.controllers.validators",
        "peekOfCode": "def validate_text(text):\n    if text.isalpha():\n        return 1\n    else:\n        return 0\ndef validate_phone_number(phone_number):\n    phone_number = str(phone_number)\n    if len(phone_number) == 8:\n        if phone_number.isdigit():\n            if phone_number[0] in (\"9\", \"7\") and phone_number[1] in (",
        "detail": "routes.controllers.validators",
        "documentation": {}
    },
    {
        "label": "validate_phone_number",
        "kind": 2,
        "importPath": "routes.controllers.validators",
        "description": "routes.controllers.validators",
        "peekOfCode": "def validate_phone_number(phone_number):\n    phone_number = str(phone_number)\n    if len(phone_number) == 8:\n        if phone_number.isdigit():\n            if phone_number[0] in (\"9\", \"7\") and phone_number[1] in (\n                \"0\",\n                \"1\",\n                \"2\",\n                \"3\",\n                \"6\",",
        "detail": "routes.controllers.validators",
        "documentation": {}
    },
    {
        "label": "validate_number",
        "kind": 2,
        "importPath": "routes.controllers.validators",
        "description": "routes.controllers.validators",
        "peekOfCode": "def validate_number(number):\n    number = str(number)\n    if number.isdigit():\n        return 1\n    else:\n        return 0\ndef validate_date(my_date):\n    date_format = \"%Y-%m-%d\"\n    try:\n        datetime.datetime.strptime(my_date, date_format)",
        "detail": "routes.controllers.validators",
        "documentation": {}
    },
    {
        "label": "validate_date",
        "kind": 2,
        "importPath": "routes.controllers.validators",
        "description": "routes.controllers.validators",
        "peekOfCode": "def validate_date(my_date):\n    date_format = \"%Y-%m-%d\"\n    try:\n        datetime.datetime.strptime(my_date, date_format)\n    except ValueError:\n        return 0\n    return 1",
        "detail": "routes.controllers.validators",
        "documentation": {}
    },
    {
        "label": "route_classe",
        "kind": 2,
        "importPath": "routes.classes",
        "description": "routes.classes",
        "peekOfCode": "def route_classe(choix):\n    if choix == \"1\":\n        afficher_eleves()\n    elif choix == \"2\":\n        ajouter_eleve()\n    elif choix == \"3\":\n        supprimer_eleve()\n    elif choix == \"4\":\n        editer_eleve()\n    elif choix == \"5\":",
        "detail": "routes.classes",
        "documentation": {}
    },
    {
        "label": "route_eleve",
        "kind": 2,
        "importPath": "routes.eleves",
        "description": "routes.eleves",
        "peekOfCode": "def route_eleve(choix):\n    if choix == \"1\":\n        afficher_eleves()\n    elif choix == \"2\":\n        ajouter_eleve()\n    elif choix == \"3\":\n        supprimer_eleve()\n    elif choix == \"4\":\n        editer_eleve()\n    elif choix == \"5\":",
        "detail": "routes.eleves",
        "documentation": {}
    },
    {
        "label": "route_enseignant",
        "kind": 2,
        "importPath": "routes.enseignants",
        "description": "routes.enseignants",
        "peekOfCode": "def route_enseignant(choix):\n    if choix == \"1\":\n        afficher_eleves()\n    elif choix == \"2\":\n        ajouter_eleve()\n    elif choix == \"3\":\n        supprimer_eleve()\n    elif choix == \"4\":\n        editer_eleve()\n    elif choix == \"5\":",
        "detail": "routes.enseignants",
        "documentation": {}
    },
    {
        "label": "route_matiere",
        "kind": 2,
        "importPath": "routes.matieres",
        "description": "routes.matieres",
        "peekOfCode": "def route_matiere(Choix):\n    if choix == \"1\":\n        afficher_eleves()\n    elif choix == \"2\":\n        ajouter_eleve()\n    elif choix == \"3\":\n        supprimer_eleve()\n    elif choix == \"4\":\n        editer_eleve()\n    elif choix == \"5\":",
        "detail": "routes.matieres",
        "documentation": {}
    },
    {
        "label": "route_programme",
        "kind": 2,
        "importPath": "routes.programmes",
        "description": "routes.programmes",
        "peekOfCode": "def route_programme(Choix):\n    if choix == \"1\":\n        afficher_eleves()\n    elif choix == \"2\":\n        ajouter_eleve()\n    elif choix == \"3\":\n        supprimer_eleve()\n    elif choix == \"4\":\n        editer_eleve()\n    elif choix == \"5\":",
        "detail": "routes.programmes",
        "documentation": {}
    },
    {
        "label": "route_tuteur",
        "kind": 2,
        "importPath": "routes.tuteur",
        "description": "routes.tuteur",
        "peekOfCode": "def route_tuteur(Choix):\n    if choix == \"1\":\n        afficher_eleves()\n    elif choix == \"2\":\n        ajouter_eleve()\n    elif choix == \"3\":\n        supprimer_eleve()\n    elif choix == \"4\":\n        editer_eleve()\n    elif choix == \"5\":",
        "detail": "routes.tuteur",
        "documentation": {}
    },
    {
        "label": "route_classe",
        "kind": 2,
        "importPath": "route",
        "description": "route",
        "peekOfCode": "def route_classe(choix):\n    while True:\n        if choix == \"1\":\n            afficher()\n        elif choix == \"2\":\n            ajouter()\n        elif choix == \"3\":\n            supprimer()\n        elif choix == \"4\":\n            editer()",
        "detail": "route",
        "documentation": {}
    },
    {
        "label": "route_eleve",
        "kind": 2,
        "importPath": "route",
        "description": "route",
        "peekOfCode": "def route_eleve(choix):\n    while True:\n        if choix == \"1\":\n            afficher()\n        elif choix == \"2\":\n            ajouter()\n        elif choix == \"3\":\n            supprimer()\n        elif choix == \"4\":\n            editer()",
        "detail": "route",
        "documentation": {}
    },
    {
        "label": "route_enseignant",
        "kind": 2,
        "importPath": "route",
        "description": "route",
        "peekOfCode": "def route_enseignant(choix):\n    while True:\n        if choix == \"1\":\n            afficher()\n        elif choix == \"2\":\n            ajouter()\n        elif choix == \"3\":\n            supprimer()\n        elif choix == \"4\":\n            editer()",
        "detail": "route",
        "documentation": {}
    },
    {
        "label": "route_matiere",
        "kind": 2,
        "importPath": "route",
        "description": "route",
        "peekOfCode": "def route_matiere(Choix):\n    while True:\n        if choix == \"1\":\n            afficher()\n        elif choix == \"2\":\n            ajouter()\n        elif choix == \"3\":\n            supprimer()\n        elif choix == \"4\":\n            editer()",
        "detail": "route",
        "documentation": {}
    },
    {
        "label": "route_programme",
        "kind": 2,
        "importPath": "route",
        "description": "route",
        "peekOfCode": "def route_programme(Choix):\n    while True:\n        if choix == \"1\":\n            afficher()\n        elif choix == \"2\":\n            ajouter()\n        elif choix == \"3\":\n            supprimer()\n        elif choix == \"4\":\n            editer()",
        "detail": "route",
        "documentation": {}
    },
    {
        "label": "route_tuteur",
        "kind": 2,
        "importPath": "route",
        "description": "route",
        "peekOfCode": "def route_tuteur(Choix):\n    while True:\n        if choix == \"1\":\n            afficher()\n        elif choix == \"2\":\n            ajouter()\n        elif choix == \"3\":\n            supprimer()\n        elif choix == \"4\":\n            editer()",
        "detail": "route",
        "documentation": {}
    },
    {
        "label": "vue",
        "kind": 2,
        "importPath": "vue",
        "description": "vue",
        "peekOfCode": "def vue(table):\n    print(\"==========================================================\")\n    print(f\"                      {table.capitalize}                     \")\n    print(\"==========================================================\")\n    print(f\"1. Afficher les {table}s\")\n    print(f\"2. Ajouter un {table}\")\n    print(f\"3. Supprimer un {table}\")\n    print(f\"4. Éditer un {table}\")\n    print(f\"5. Menu principale\")\n    print(f\"[ctrl+c]. Quitter\")",
        "detail": "vue",
        "documentation": {}
    }
]